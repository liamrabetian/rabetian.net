<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on Mo Rabetian</title>
    <link>/blog/</link>
    <description>Recent content in Blogs on Mo Rabetian</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Mon, 02 Aug 2021 15:59:13 -0400</lastBuildDate><atom:link href="/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Rate Limit With A Recorder</title>
      <link>/blog/sixth/</link>
      <pubDate>Mon, 02 Aug 2021 15:59:13 -0400</pubDate>
      
      <guid>/blog/sixth/</guid>
      <description>You all have used rate-limiting in your apps(you know the system to prevent an API from being overwhelmed or being abused!) and if you haven&amp;rsquo;t, I strongly suggest doing so. There is a handy package specifically for Django called django-ratelimit that provides a decorator to rate-limit views. What is not covered by this package, is the ability to see what IPs or users have exceeded the ratelimit. So I have built a proxy and two handlers on top of this package(one for the cache and one for the database backend) which stores the mentioned data and enables you to look it up inside the Django admin panel.</description>
    </item>
    
    <item>
      <title>How To Count Your Postgres Tables In Django, Fast!</title>
      <link>/blog/fifth/</link>
      <pubDate>Tue, 17 Nov 2020 15:59:13 -0400</pubDate>
      
      <guid>/blog/fifth/</guid>
      <description>When you want to do a full count on your tables in django, you often do it like this:
MyModel.objects.count() which will produce a sql like this:
SELECT COUNT(*) AS &amp;#34;__count&amp;#34; FROM &amp;#34;myapp_mymodel&amp;#34; Which is pretty fine most of the time, but what happens if you have a lot of data and rows on your table? Then for instance in my experience it took 20 seconds to count all the rows in a table!</description>
    </item>
    
    <item>
      <title>Docker, Celery and Queues</title>
      <link>/blog/third/</link>
      <pubDate>Fri, 30 Oct 2020 15:59:13 -0400</pubDate>
      
      <guid>/blog/third/</guid>
      <description>There are a lot of blogs on how to setup docker and celery for development, but none of them are really practical or like a real world example of development.
So I&amp;rsquo;m gonna show how I setup celery with docker while I have a few different celery queues for development.
Setup Celery and Docker when you only have one queue :
Dockerfile FROMpython:3.8 ENV LANG=C.UTF-8 LC_ALL=C.UTF-8 PYTHONUNBUFFERED=1WORKDIR/ COPY requirements.txt ./ RUN pip install --no-cache-dir -r requirements.</description>
    </item>
    
    <item>
      <title>Not Married To Any Tech Stack</title>
      <link>/blog/fourth/</link>
      <pubDate>Tue, 20 Oct 2020 15:59:13 -0400</pubDate>
      
      <guid>/blog/fourth/</guid>
      <description>I&amp;rsquo;ve done some observation. If you look at job postings in big companies, they always post their job positions with the title &amp;ldquo;Software engineer&amp;rdquo; or &amp;ldquo;Senior software engineer&amp;rdquo;. While if you look at other companies which are just startups or not that big or might not be very famous, they always post their job offers with the title &amp;ldquo;{Some_Language} developer&amp;rdquo; or &amp;ldquo;Senior {Some_Language} developer&amp;rdquo;.
Now what&amp;rsquo;s the difference here? A really good software engineer isn&amp;rsquo;t bound to any specific tool or technology!</description>
    </item>
    
    <item>
      <title>Websites You Need To Bookmark As A Programmer</title>
      <link>/blog/second/</link>
      <pubDate>Sun, 11 Oct 2020 15:59:13 -0400</pubDate>
      
      <guid>/blog/second/</guid>
      <description>I was personally fascinated by the materials in these websites. Every time I look at the work has been done on these sites I get a small tangling feeling in my head. To be honest I&amp;rsquo;m blown away by some of em.
Learning to program isn&amp;rsquo;t just about learning the syntax or how to just combine things together. As Zi Chong Kao says : &amp;ldquo;Learning to program is learning a mental model&amp;rdquo;</description>
    </item>
    
    <item>
      <title>Simple Questions, Obvious Answers, Hidden Details</title>
      <link>/blog/first/</link>
      <pubDate>Fri, 02 Oct 2020 15:59:13 -0400</pubDate>
      
      <guid>/blog/first/</guid>
      <description>You want to know how good is someone at Python? You don&amp;rsquo;t need to ask strange obscure questions. Just ask for simple questions which has some hidden technology details behind it.
Like : how do you do a membership test in python?!
Now everyone knows how to do a membership test! You just check if a collection of items contain a specific item. Something like ;
if number in list_of_numbers: # Do something But what not everybody knows is the time complexity of membership testing.</description>
    </item>
    
  </channel>
</rss>
